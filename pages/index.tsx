import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useState } from 'react';
import { useRecoilState, useRecoilValue } from 'recoil';
import { pokemonListState, selectedPokemonState } from '../atoms/pokemon-atom';
import { notFoundPokemonState } from '../atoms/error-atom';
import { searchLoadingState } from '../atoms/search-loading-atom';
import { Button, Container, Toast } from 'react-bootstrap';
import PokemonCard from '../components/pokemon-card/pokemon-card';
import PokemonSearchInput from '../components/pokemon-search-input/pokemon-search-input';
import { PokemonApiService } from '../services/pokemon-services';
import { ErrorService } from '../services/error-services';
import NotFoundPokemon from '../components/not-found-pokemon/not-found-pokemon';
import PokeballLoader from '../components/pokeball-loader/pokemon-loader';
import PokemonLoader from '../components/pokeball-loader/pokemon-loader';
import Navbar from '../components/navbar/navbar';
import { Pokemon } from '../models/pokemon-model';

const initialPokeList: Pokemon[] = [];

export default function Home() {
  // HOOK ZONE
  const [inputValue, setValue] = useState('');
  const [pokemonCaptureList, setPokemonCaptureList] = useState(initialPokeList);
  const [selectedCard, toggleSelected] = useState(false);
  const [showToast, setShowToast] = useState(false);

  const [selectedPokemon, setSelectedPokemon] =
    useRecoilState(selectedPokemonState);
  const getPokemon = useRecoilValue(selectedPokemonState);
  const [notFoundPokemonPlaceholder, setNotFoundPokemonPlaceholder] =
    useRecoilState(notFoundPokemonState);
  const [searchLoadingPlaceholder, setSearchLoadingPlaceholder] =
    useRecoilState(searchLoadingState);
  const [pokemonList, setPokemonToList] = useRecoilState(pokemonListState);

  // FUNCTIONS ZONE

  const pokeLoader = () => {
    return `${selectedPokemon?.sprites?.front_default}`;
  };

  const getTypedValue = (inputValue: string) => {
    setValue(inputValue);
  };

  const getSearchedPokemon = () => {
    console.log(getPokemon);
  };

  const selectPokemon = () => {
    toggleSelected(!selectedCard);
  };

  const handleKeyUp = (event: any) => {
    const typedValue = event.target.value;
    if (event.key === 'Enter') {
      setValue(typedValue);
      search(typedValue);
    }
    getTypedValue(typedValue);
  };

  const search = (pokemon: string) => {
    if (pokemon.length === 0) {
      return;
    } else {
      setSearchLoadingPlaceholder(true);
      setNotFoundPokemonPlaceholder(false);
      PokemonApiService.searchPokemon(pokemon)
        .then((response: any) => {
          setSelectedPokemon(response);
          toggleSelected(false);
          setSearchLoadingPlaceholder(false);
        })
        .catch((error) => {
          const errorCode = error.response.status;
          ErrorService.setErrorStatus(errorCode);
          setSelectedPokemon({});
          setNotFoundPokemonPlaceholder(true);
        });
    }
  };

  const catchPokemon = () => {
    let pokeList: Pokemon[] = [];
    pokeList = pokemonCaptureList;
    const teste = [...pokeList, selectedPokemon];
    setPokemonToList(teste);
    setPokemonCaptureList(teste);
    setShowToast(true);
  };

  return (
    <div className={styles.container}>
      {/* HEADER */}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      {/* CONTENT */}
      <main className={styles.main} onKeyUp={handleKeyUp}>
        <h1 className={styles.title}>Welcome to Pokenext!</h1>
        <PokemonSearchInput required={true} getTypedValue={getTypedValue} />
        <Container
          style={{
            marginBottom: '2rem',
            display: 'flex',
            justifyContent: 'center',
            width: '22vw',
          }}
        >
          <Button
            variant="danger"
            style={{ marginRight: '1rem' }}
            onClick={() => search(inputValue)}
          >
            <label className={styles.buttonLabel}>Search Pokemon!</label>
          </Button>
          <Button
            variant="warning"
            style={{ marginLeft: '1rem' }}
            onClick={getSearchedPokemon}
          >
            <label className={styles.buttonLabel}>Get Pokemon Info</label>
          </Button>
        </Container>

        {selectedPokemon.sprites && !searchLoadingPlaceholder ? (
          <PokemonCard
            selected={selectedCard}
            onClick={selectPokemon}
            pokemon={selectedPokemon}
          />
        ) : (
          <></>
        )}
        {!notFoundPokemonPlaceholder &&
        !searchLoadingPlaceholder &&
        !selectedPokemon.id ? (
          <Image
            width={144}
            height={144}
            src={'/svg/pokeball.svg'}
            alt="pokeball"
          />
        ) : (
          <></>
        )}
        {notFoundPokemonPlaceholder ? <NotFoundPokemon /> : <></>}
        {searchLoadingPlaceholder && !notFoundPokemonPlaceholder ? (
          <PokemonLoader />
        ) : (
          <></>
        )}
        {selectedCard && selectedPokemon.id ? (
          <Button className="mt-3" onClick={catchPokemon}>
            Catch Pokémon!
          </Button>
        ) : null}
        <Toast
          onClose={() => setShowToast(false)}
          show={showToast}
          delay={3000}
          autohide
          className="mt-3"
          bg="success"
        >
          <Toast.Body>Woohoo, Pokémon captured!</Toast.Body>
        </Toast>
      </main>

      {/* FOOTER */}
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by {'Victor'}
        </a>
      </footer>
    </div>
  );
}
