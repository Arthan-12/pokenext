import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useState } from 'react';
import { Button, Container, Toast } from 'react-bootstrap';
import PokemonCard from '../components/pokemon-card/pokemon-card';
import PokemonSearchInput from '../components/pokemon-search-input/pokemon-search-input';
import { PokemonApiService } from '../services/pokemon-services';
import { ErrorService } from '../services/error-services';
import NotFoundPokemon from '../components/not-found-pokemon/not-found-pokemon';
import PokemonLoader from '../components/pokeball-loader/pokemon-loader';
import Navbar from '../components/navbar/navbar';
import { Pokemon } from '../models/pokemon-model';
import React from 'react';
import PokemonListContext from '../contexts/pokemon-list-context';
import PokemonContext from '../contexts/pokemon-context';

const initialPokeList: Pokemon[] = [];
const POKEMON_DEFAULT_VALUE = {
  name: null,
  id: null,
  sprites: null,
  types: [],
  weight: null,
  height: null,
  order: null,
};

export default function Home() {
  // HOOK ZONE
  const [inputValue, setValue] = useState('');
  const [pokemonCaptureList, setPokemonCaptureList] = useState(initialPokeList);
  const [selectedCard, toggleSelected] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [searchedPokemon, setSearchedPokemon] = useState(null);
  const [notFound, setNotFoundState] = useState(false);
  const [searching, setSearchingState] = useState(false);

  const [listContext, setListContext] = useState<Pokemon[] | null>([]);
  const [context, setContext] = useState<Pokemon | null>(null);

  // FUNCTIONS ZONE

  const getTypedValue = (inputValue: string) => {
    setValue(inputValue);
  };

  const getSearchedPokemon = () => {
    console.log(searchedPokemon);
  };

  const selectPokemon = () => {
    toggleSelected(!selectedCard);
  };

  const handleKeyUp = (event: any) => {
    const typedValue = event.target.value;
    if (event.key === 'Enter') {
      setValue(typedValue);
      search(typedValue);
    }
    getTypedValue(typedValue);
  };

  const clearSelectedPokemon = (clear: boolean) => {
    if (clear) {
      setContext(null);
      setSearchedPokemon(null);
    }
  };

  const search = (pokemon: string) => {
    if (pokemon.length === 0) {
      return;
    } else {
      setSearchingState(true);
      setNotFoundState(false);
      PokemonApiService.searchPokemon(pokemon)
        .then((response: any) => {
          setSearchedPokemon(response);
          setContext(response);
          toggleSelected(false);
          setSearchingState(false);
        })
        .catch((error) => {
          const errorCode = error.response.status;
          ErrorService.setErrorStatus(errorCode);
          setSearchedPokemon(null);
          setNotFoundState(true);
          setContext(null);
        });
    }
  };

  const catchPokemon = () => {
    let pokeList: Pokemon[] = [];
    const storageList = JSON.parse(sessionStorage.getItem('pokemonList'));
    if (storageList) {
      pokeList = storageList;
    }
    setListContext([...pokeList, searchedPokemon]);
    console.log(listContext);
    const stringPokemonList = JSON.stringify([...pokeList, searchedPokemon]);
    sessionStorage.setItem('pokemonList', stringPokemonList);
    setPokemonCaptureList([...pokeList, searchedPokemon]);
    setShowToast(true);
  };

  return (
    <div className={styles.container}>
      {/* HEADER */}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PokemonListContext.Provider value={{ listContext, setListContext }}>
        <PokemonContext.Provider value={{ context, setContext }}>
          <Navbar />

          {/* CONTENT */}
          <main className={styles.main} onKeyUp={handleKeyUp}>
            <h1 className={styles.title}>Welcome to Pokenext!</h1>
            <PokemonSearchInput
              required={true}
              getTypedValue={getTypedValue}
              clearSelectedPokemon={clearSelectedPokemon}
            />
            <Container
              style={{
                marginBottom: '2rem',
                display: 'flex',
                justifyContent: 'center',
                width: '22vw',
              }}
            >
              <Button
                variant="danger"
                style={{ marginRight: '1rem' }}
                onClick={() => search(inputValue)}
              >
                <label className={styles.buttonLabel}>Search Pokemon!</label>
              </Button>
              <Button
                variant="warning"
                style={{ marginLeft: '1rem' }}
                onClick={getSearchedPokemon}
              >
                <label className={styles.buttonLabel}>Get Pokemon Info</label>
              </Button>
            </Container>

            {searchedPokemon && !searching ? (
              <PokemonCard
                selected={selectedCard}
                onClick={selectPokemon}
                pokemon={searchedPokemon}
              />
            ) : (
              <></>
            )}
            {!notFound && !searching && !searchedPokemon ? (
              <Image
                width={144}
                height={144}
                src={'/svg/pokeball.svg'}
                alt="pokeball"
              />
            ) : (
              <></>
            )}
            {notFound ? <NotFoundPokemon /> : <></>}
            {searching && !notFound ? <PokemonLoader /> : <></>}
            {selectedCard && searchedPokemon ? (
              <Button className="mt-3" onClick={catchPokemon}>
                Catch Pokémon!
              </Button>
            ) : null}
            <Toast
              onClose={() => setShowToast(false)}
              show={showToast}
              delay={3000}
              autohide
              className="mt-3"
              bg="success"
            >
              <Toast.Body>Woohoo, Pokémon captured!</Toast.Body>
            </Toast>
          </main>
        </PokemonContext.Provider>
      </PokemonListContext.Provider>

      {/* FOOTER */}
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by {'Victor'}
        </a>
      </footer>
    </div>
  );
}
